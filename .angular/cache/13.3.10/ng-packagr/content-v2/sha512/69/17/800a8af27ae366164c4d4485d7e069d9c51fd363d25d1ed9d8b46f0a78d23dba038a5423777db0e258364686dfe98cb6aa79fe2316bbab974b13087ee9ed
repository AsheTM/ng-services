{"hash":"4a69847a7684f6e02838f83f748636ef846e8ea0","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, NgModule, Injector } from '@angular/core';\nimport { BehaviorSubject, combineLatest, from } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nclass AMediastream {\r\n    constructor() {\r\n        this.NAVIGATOR = window.navigator;\r\n        this.MEDIA_DEVICES = this.NAVIGATOR.mediaDevices;\r\n    }\r\n}\n\nclass AMediastreamDevice extends AMediastream {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._currentMediaDeviceSubject$ = new BehaviorSubject(null);\r\n        this.currentMediaDevice$ = this._currentMediaDeviceSubject$;\r\n    }\r\n}\n\nclass AMediastreamService extends AMediastreamDevice {\r\n    constructor(_mediaConstraints) {\r\n        super();\r\n        this._mediaConstraints = _mediaConstraints;\r\n        this._toggleMediaStreamSubject = new BehaviorSubject(true);\r\n    }\r\n    get mediastreamConstraints() {\r\n        return this._mediaConstraints;\r\n    }\r\n    _buildMediaConstraints(device) {\r\n        switch (true) {\r\n            case device && typeof this._mediaConstraints === 'object':\r\n                return {\r\n                    ...this._mediaConstraints,\r\n                    deviceId: device.deviceId\r\n                };\r\n            case device\r\n                && typeof this._mediaConstraints === 'boolean'\r\n                && this._mediaConstraints:\r\n                return {\r\n                    deviceId: device.deviceId\r\n                };\r\n            case device\r\n                && typeof this._mediaConstraints === 'boolean'\r\n                && !this._mediaConstraints:\r\n                return this._mediaConstraints;\r\n            default:\r\n                return {\r\n                    ...this._mediaConstraints\r\n                };\r\n        }\r\n    }\r\n}\n\nclass AMediastreamCameraService extends AMediastreamService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._userMedia$ = combineLatest([\r\n            this._currentMediaDeviceSubject$\r\n        ]).pipe(switchMap(([device]) => from(this.MEDIA_DEVICES.getUserMedia({\r\n            audio: false,\r\n            video: this._buildMediaConstraints(device)\r\n        }))));\r\n    }\r\n    disableCamera() {\r\n        this._toggleMediaStreamSubject.next(false);\r\n    }\r\n    enableCamera() {\r\n        this._toggleMediaStreamSubject.next(true);\r\n    }\r\n    toggleCamera() {\r\n        const value = this._toggleMediaStreamSubject.getValue();\r\n        this._toggleMediaStreamSubject.next(!value);\r\n    }\r\n    updateCameraDevice(device) {\r\n        this._currentMediaDeviceSubject$.next(device);\r\n    }\r\n}\n\nconst MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS = new InjectionToken('MEDIASTREAM_CAMERA_CONSTRAINTS');\r\nconst MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS = new InjectionToken('MEDIASTREAM_MICROPHONE_CONSTRAINTS');\n\nclass MediastreamCameraService extends AMediastreamCameraService {\r\n    constructor(__mediastreamCameraConstraints) {\r\n        super(__mediastreamCameraConstraints);\r\n        this.__mediastreamCameraConstraints = __mediastreamCameraConstraints;\r\n        this.mediastream$ = combineLatest([\r\n            this._toggleMediaStreamSubject.asObservable(),\r\n            this._userMedia$\r\n        ]).pipe(map(([toggleCamera, media]) => {\r\n            media.getAudioTracks()\r\n                .map((track) => {\r\n                track.enabled = toggleCamera;\r\n                return track;\r\n            });\r\n            return media;\r\n        }));\r\n    }\r\n}\r\nMediastreamCameraService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService, deps: [{ token: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamCameraService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS]\r\n                }] }]; } });\n\nclass AMediastreamMicrophoneService extends AMediastreamService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._userMedia$ = combineLatest([\r\n            this._currentMediaDeviceSubject$\r\n        ]).pipe(switchMap(([device]) => from(this.MEDIA_DEVICES.getUserMedia({\r\n            audio: this._buildMediaConstraints(device),\r\n            video: false\r\n        }))));\r\n    }\r\n    disableMicrophone() {\r\n        this._toggleMediaStreamSubject.next(false);\r\n    }\r\n    enableMicrophone() {\r\n        this._toggleMediaStreamSubject.next(true);\r\n    }\r\n    toggleMicrophone() {\r\n        const value = this._toggleMediaStreamSubject.getValue();\r\n        this._toggleMediaStreamSubject.next(!value);\r\n    }\r\n    updateMicrophoneDevice(device) {\r\n        this._currentMediaDeviceSubject$.next(device);\r\n    }\r\n}\n\nclass MediastreamMicrophoneService extends AMediastreamMicrophoneService {\r\n    constructor(__mediastreamMicrophoneConstraints) {\r\n        super(__mediastreamMicrophoneConstraints);\r\n        this.__mediastreamMicrophoneConstraints = __mediastreamMicrophoneConstraints;\r\n        this.mediastream$ = combineLatest([\r\n            this._toggleMediaStreamSubject.asObservable(),\r\n            this._userMedia$\r\n        ]).pipe(map(([toggleMicrophone, media]) => {\r\n            media.getAudioTracks()\r\n                .map((track) => {\r\n                track.enabled = toggleMicrophone;\r\n                return track;\r\n            });\r\n            return media;\r\n        }));\r\n    }\r\n}\r\nMediastreamMicrophoneService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService, deps: [{ token: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamMicrophoneService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS]\r\n                }] }]; } });\n\nclass MediastreamCameraMicrophoneService {\r\n    constructor(_mediastreamCameraService, _mediastreamMicrophoneService) {\r\n        this._mediastreamCameraService = _mediastreamCameraService;\r\n        this._mediastreamMicrophoneService = _mediastreamMicrophoneService;\r\n        this.currentCameraMediaDevice$ = this._mediastreamCameraService.currentMediaDevice$;\r\n        this.currentMicrophoneMediaDevice$ = this._mediastreamMicrophoneService.currentMediaDevice$;\r\n        this.mediastream$ = combineLatest([\r\n            this._mediastreamCameraService.mediastream$,\r\n            this._mediastreamMicrophoneService.mediastream$\r\n        ]).pipe(map(([mediastreamCamera, mediastreamMicrophone]) => {\r\n            const mediastreamCameraTracks = mediastreamCamera.getVideoTracks();\r\n            const mediastreamMicrophoneTracks = mediastreamMicrophone.getAudioTracks();\r\n            const mediastreamTracks = [\r\n                ...mediastreamCameraTracks,\r\n                ...mediastreamMicrophoneTracks\r\n            ];\r\n            return new MediaStream(mediastreamTracks);\r\n        }));\r\n    }\r\n    get mediastreamCameraConstraints() {\r\n        return this._mediastreamCameraService.mediastreamConstraints;\r\n    }\r\n    get mediastreamMicrophoneConstraints() {\r\n        return this._mediastreamMicrophoneService.mediastreamConstraints;\r\n    }\r\n    disableCamera() {\r\n        this._mediastreamCameraService.disableCamera();\r\n    }\r\n    disableMicrophone() {\r\n        this._mediastreamMicrophoneService.disableMicrophone();\r\n    }\r\n    enableCamera() {\r\n        this._mediastreamCameraService.enableCamera();\r\n    }\r\n    enableMicrophone() {\r\n        this._mediastreamMicrophoneService.enableMicrophone();\r\n    }\r\n    toggleCamera() {\r\n        this._mediastreamCameraService.toggleCamera();\r\n    }\r\n    toggleMicrophone() {\r\n        this._mediastreamMicrophoneService.toggleMicrophone();\r\n    }\r\n    updateCameraDevice(device) {\r\n        this._mediastreamCameraService.updateCameraDevice(device);\r\n    }\r\n    updateMicrophoneDevice(device) {\r\n        this._mediastreamMicrophoneService.updateMicrophoneDevice(device);\r\n    }\r\n}\r\nMediastreamCameraMicrophoneService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService, deps: [{ token: MediastreamCameraService }, { token: MediastreamMicrophoneService }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamCameraMicrophoneService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: MediastreamCameraService }, { type: MediastreamMicrophoneService }]; } });\n\nclass MediastreamModule {\r\n}\r\nMediastreamModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMediastreamModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule });\r\nMediastreamModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{}]\r\n        }] });\n\nclass MediastreamService extends AMediastream {\r\n    constructor(_injector) {\r\n        super();\r\n        this._injector = _injector;\r\n    }\r\n    async getCameraDevices() {\r\n        return (await this.getDevices()).filter((device) => device.kind === 'videoinput');\r\n    }\r\n    async getDevices() {\r\n        return await this.MEDIA_DEVICES.enumerateDevices();\r\n    }\r\n    async getMicrophoneDevices() {\r\n        return (await this.getDevices()).filter((device) => device.kind === 'audioinput');\r\n    }\r\n    async hasCameraDevices() {\r\n        return (await this.getCameraDevices()).length !== 0;\r\n    }\r\n    async hasMicrophoneDevices() {\r\n        return (await this.getMicrophoneDevices()).length !== 0;\r\n    }\r\n    async requestCamera(constraints) {\r\n        const cameraConstraints = constraints || true;\r\n        const injector = Injector.create({\r\n            providers: [\r\n                {\r\n                    provide: MediastreamCameraService,\r\n                    useClass: MediastreamCameraService\r\n                }, {\r\n                    provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n                    useValue: cameraConstraints\r\n                }\r\n            ],\r\n            parent: this._injector\r\n        });\r\n        return await this.MEDIA_DEVICES.getUserMedia({\r\n            audio: false,\r\n            video: cameraConstraints\r\n        }).then(() => injector.get(MediastreamCameraService));\r\n    }\r\n    async requestCameraAndMicrophone(constraints) {\r\n        const cameraConstraints = constraints?.video || true;\r\n        const microphoneConstraints = constraints?.audio || true;\r\n        const injector = Injector.create({\r\n            providers: [\r\n                {\r\n                    provide: MediastreamCameraService,\r\n                    useClass: MediastreamCameraService\r\n                }, {\r\n                    provide: MediastreamCameraMicrophoneService,\r\n                    useClass: MediastreamCameraMicrophoneService\r\n                }, {\r\n                    provide: MediastreamMicrophoneService,\r\n                    useClass: MediastreamMicrophoneService\r\n                }, {\r\n                    provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n                    useValue: cameraConstraints\r\n                }, {\r\n                    provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n                    useValue: microphoneConstraints\r\n                }\r\n            ],\r\n            parent: this._injector\r\n        });\r\n        return await this.MEDIA_DEVICES.getUserMedia({\r\n            audio: microphoneConstraints,\r\n            video: cameraConstraints\r\n        }).then(() => injector.get(MediastreamCameraMicrophoneService));\r\n    }\r\n    async requestMicrophone(constraints) {\r\n        const microphoneConstraints = constraints || true;\r\n        const injector = Injector.create({\r\n            providers: [\r\n                {\r\n                    provide: MediastreamMicrophoneService,\r\n                    useClass: MediastreamMicrophoneService\r\n                }, {\r\n                    provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n                    useValue: microphoneConstraints\r\n                }\r\n            ],\r\n            parent: this._injector\r\n        });\r\n        return await this.MEDIA_DEVICES.getUserMedia({\r\n            audio: microphoneConstraints,\r\n            video: false\r\n        }).then(() => injector.get(MediastreamMicrophoneService));\r\n    }\r\n}\r\nMediastreamService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, providedIn: MediastreamModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: MediastreamModule\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\n/*\r\n * Public API Surface of mediastream\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MediastreamCameraMicrophoneService, MediastreamCameraService, MediastreamMicrophoneService, MediastreamModule, MediastreamService };\n//# sourceMappingURL=ashetm-ng-mediastream.mjs.map\n","map":{"version":3,"file":"ashetm-ng-mediastream.mjs","sources":["../../../projects/mediastream/src/lib/mediastream.class.ts","../../../projects/mediastream/src/lib/mediastream-device.class.ts","../../../projects/mediastream/src/lib/mediastream-service.class.ts","../../../projects/mediastream/src/lib/mediastream-camera-service.class.ts","../../../projects/mediastream/src/lib/mediastream.token.ts","../../../projects/mediastream/src/lib/mediastream-camera.service.ts","../../../projects/mediastream/src/lib/mediastream-microphone-service.class.ts","../../../projects/mediastream/src/lib/mediastream-microphone.service.ts","../../../projects/mediastream/src/lib/mediastream-camera-microphone.service.ts","../../../projects/mediastream/src/lib/mediastream.module.ts","../../../projects/mediastream/src/lib/mediastream.service.ts","../../../projects/mediastream/src/public-api.ts","../../../projects/mediastream/src/ashetm-ng-mediastream.ts"],"sourcesContent":["\r\nexport abstract class AMediastream {\r\n\r\n  protected readonly NAVIGATOR: Navigator = window.navigator;\r\n  protected readonly MEDIA_DEVICES: MediaDevices = this.NAVIGATOR.mediaDevices;\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nimport { AMediastream } from \"./mediastream.class\";\r\n\r\n\r\nexport abstract class AMediastreamDevice extends AMediastream {\r\n\r\n  protected readonly _currentMediaDeviceSubject$: BehaviorSubject<MediaDeviceInfo>\r\n    = new BehaviorSubject<MediaDeviceInfo>(null as any as MediaDeviceInfo);\r\n  readonly currentMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._currentMediaDeviceSubject$;\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nimport { AMediastreamDevice } from \"./mediastream-device.class\";\r\n\r\n\r\nexport abstract class AMediastreamService extends AMediastreamDevice {\r\n\r\n  abstract readonly mediastream$: Observable<MediaStream>;\r\n\r\n  protected readonly _toggleMediaStreamSubject: BehaviorSubject<boolean>\r\n    = new BehaviorSubject<boolean>(true);\r\n\r\n  get mediastreamConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediaConstraints;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly _mediaConstraints: boolean | MediaTrackConstraints\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  protected _buildMediaConstraints(\r\n    device: MediaDeviceInfo | null\r\n  ): boolean | MediaTrackConstraints {\r\n    switch (true) {\r\n      case device && typeof this._mediaConstraints === 'object':\r\n        return {\r\n          ...this._mediaConstraints as MediaTrackConstraints,\r\n          deviceId: (device as MediaDeviceInfo).deviceId\r\n        };\r\n      case device\r\n        && typeof this._mediaConstraints === 'boolean'\r\n          && this._mediaConstraints:\r\n        return {\r\n          deviceId: (device as MediaDeviceInfo).deviceId\r\n        };\r\n      case device\r\n        && typeof this._mediaConstraints === 'boolean'\r\n          && !this._mediaConstraints:\r\n        return this._mediaConstraints as false;\r\n\r\n      default:\r\n        return {\r\n          ...this._mediaConstraints as MediaTrackConstraints\r\n        };\r\n    }\r\n  }\r\n\r\n}\r\n","import { combineLatest, from, Observable } from \"rxjs\";\r\nimport { switchMap } from \"rxjs/operators\";\r\n\r\nimport { IMediastreamCameraService } from \"./mediastream-camera-service.interface\";\r\nimport { AMediastreamService } from \"./mediastream-service.class\";\r\n\r\n\r\nexport abstract class AMediastreamCameraService\r\n  extends AMediastreamService\r\n  implements IMediastreamCameraService {\r\n\r\n  protected readonly _userMedia$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._currentMediaDeviceSubject$\r\n    ]).pipe(switchMap(([device]: [MediaDeviceInfo]) =>\r\n      from(this.MEDIA_DEVICES.getUserMedia({\r\n        audio: false,\r\n        video: this._buildMediaConstraints(device)\r\n      }))));\r\n\r\n  disableCamera(): void {\r\n    this._toggleMediaStreamSubject.next(false);\r\n  }\r\n\r\n  enableCamera(): void {\r\n    this._toggleMediaStreamSubject.next(true);\r\n  }\r\n\r\n  toggleCamera(): void {\r\n    const value: boolean = this._toggleMediaStreamSubject.getValue();\r\n\r\n    this._toggleMediaStreamSubject.next(!value);\r\n  }\r\n\r\n  updateCameraDevice(\r\n    device: MediaDeviceInfo & Record<'kind', 'videoinput'>\r\n  ): void {\r\n    this._currentMediaDeviceSubject$.next(device);\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport const MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS: InjectionToken<boolean | MediaStreamConstraints>\r\n  = new InjectionToken<boolean | MediaStreamConstraints>('MEDIASTREAM_CAMERA_CONSTRAINTS');\r\nexport const MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS: InjectionToken<boolean | MediaStreamConstraints>\r\n  = new InjectionToken<boolean | MediaStreamConstraints>('MEDIASTREAM_MICROPHONE_CONSTRAINTS');\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AMediastreamCameraService } from './mediastream-camera-service.class';\r\nimport { MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS } from './mediastream.token';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamCameraService extends AMediastreamCameraService {\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._toggleMediaStreamSubject.asObservable(),\r\n      this._userMedia$\r\n    ]).pipe(map(([toggleCamera, media]: [boolean, MediaStream]) => {\r\n      media.getAudioTracks()\r\n        .map((track: MediaStreamTrack) => {\r\n          track.enabled = toggleCamera;\r\n\r\n          return track;\r\n        });\r\n\r\n      return media;\r\n    }));\r\n\r\n  constructor(\r\n    @Inject(MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS)\r\n      private readonly __mediastreamCameraConstraints: any\r\n  ) {\r\n    super(__mediastreamCameraConstraints);\r\n  }\r\n\r\n}\r\n","import { combineLatest, from, Observable } from \"rxjs\";\r\nimport { switchMap } from \"rxjs/operators\";\r\n\r\nimport { IMediastreamMicrophoneService } from \"./mediastream-microphone-service.interface\";\r\nimport { AMediastreamService } from \"./mediastream-service.class\";\r\n\r\n\r\nexport abstract class AMediastreamMicrophoneService\r\n  extends AMediastreamService\r\n  implements IMediastreamMicrophoneService {\r\n\r\n  protected readonly _userMedia$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._currentMediaDeviceSubject$\r\n    ]).pipe(switchMap(([device]: [MediaDeviceInfo]) =>\r\n      from(this.MEDIA_DEVICES.getUserMedia({\r\n        audio: this._buildMediaConstraints(device),\r\n        video: false\r\n      }))));\r\n\r\n  disableMicrophone(): void {\r\n    this._toggleMediaStreamSubject.next(false);\r\n  }\r\n\r\n  enableMicrophone(): void {\r\n    this._toggleMediaStreamSubject.next(true);\r\n  }\r\n\r\n  toggleMicrophone(): void {\r\n    const value: boolean = this._toggleMediaStreamSubject.getValue();\r\n\r\n    this._toggleMediaStreamSubject.next(!value);\r\n  }\r\n\r\n  updateMicrophoneDevice(\r\n    device: MediaDeviceInfo & Record<'kind', 'audioinput'>\r\n  ): void {\r\n    this._currentMediaDeviceSubject$.next(device);\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AMediastreamMicrophoneService } from './mediastream-microphone-service.class';\r\nimport { MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS } from './mediastream.token';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamMicrophoneService extends AMediastreamMicrophoneService {\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._toggleMediaStreamSubject.asObservable(),\r\n      this._userMedia$\r\n    ]).pipe(map(([toggleMicrophone, media]: [boolean, MediaStream]) => {\r\n      media.getAudioTracks()\r\n        .map((track: MediaStreamTrack) => {\r\n          track.enabled = toggleMicrophone;\r\n\r\n          return track;\r\n        });\r\n\r\n      return media;\r\n    }));\r\n\r\n  constructor(\r\n    @Inject(MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS)\r\n      private readonly __mediastreamMicrophoneConstraints: any\r\n  ) {\r\n    super(__mediastreamMicrophoneConstraints);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { IMediastreamCameraService } from './mediastream-camera-service.interface';\r\nimport { MediastreamCameraService } from './mediastream-camera.service';\r\nimport { IMediastreamMicrophoneService } from './mediastream-microphone-service.interface';\r\nimport { MediastreamMicrophoneService } from './mediastream-microphone.service';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamCameraMicrophoneService\r\n  implements IMediastreamCameraService, IMediastreamMicrophoneService {\r\n\r\n  readonly currentCameraMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._mediastreamCameraService.currentMediaDevice$;\r\n\r\n  readonly currentMicrophoneMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._mediastreamMicrophoneService.currentMediaDevice$;\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._mediastreamCameraService.mediastream$,\r\n      this._mediastreamMicrophoneService.mediastream$\r\n    ]).pipe(map(([mediastreamCamera, mediastreamMicrophone]: [MediaStream, MediaStream]) => {\r\n      const mediastreamCameraTracks: MediaStreamTrack[] = mediastreamCamera.getVideoTracks();\r\n      const mediastreamMicrophoneTracks: MediaStreamTrack[] = mediastreamMicrophone.getAudioTracks();\r\n      const mediastreamTracks: MediaStreamTrack[] = [\r\n        ...mediastreamCameraTracks,\r\n        ...mediastreamMicrophoneTracks\r\n      ];\r\n\r\n      return new MediaStream(mediastreamTracks);\r\n    }));\r\n\r\n  get mediastreamCameraConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediastreamCameraService.mediastreamConstraints;\r\n  }\r\n\r\n  get mediastreamMicrophoneConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediastreamMicrophoneService.mediastreamConstraints;\r\n  }\r\n\r\n  constructor(\r\n    private readonly _mediastreamCameraService: MediastreamCameraService,\r\n    private readonly _mediastreamMicrophoneService: MediastreamMicrophoneService\r\n  ) { }\r\n\r\n  disableCamera(): void {\r\n    this._mediastreamCameraService.disableCamera();\r\n  }\r\n\r\n  disableMicrophone(): void {\r\n    this._mediastreamMicrophoneService.disableMicrophone();\r\n  }\r\n\r\n  enableCamera(): void {\r\n    this._mediastreamCameraService.enableCamera();\r\n  }\r\n\r\n  enableMicrophone(): void {\r\n    this._mediastreamMicrophoneService.enableMicrophone();\r\n  }\r\n\r\n  toggleCamera(): void {\r\n    this._mediastreamCameraService.toggleCamera();\r\n  }\r\n\r\n  toggleMicrophone(): void {\r\n    this._mediastreamMicrophoneService.toggleMicrophone();\r\n  }\r\n\r\n  updateCameraDevice(device: MediaDeviceInfo & Record<'kind', 'videoinput'>): void {\r\n    this._mediastreamCameraService.updateCameraDevice(device);\r\n  }\r\n\r\n  updateMicrophoneDevice(device: MediaDeviceInfo & Record<'kind', 'audioinput'>): void {\r\n    this._mediastreamMicrophoneService.updateMicrophoneDevice(device);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\n\r\n@NgModule({ })\r\nexport class MediastreamModule { }\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { MediastreamCameraMicrophoneService } from './mediastream-camera-microphone.service';\r\nimport { MediastreamCameraService } from './mediastream-camera.service';\r\nimport { MediastreamMicrophoneService } from './mediastream-microphone.service';\r\nimport { AMediastream } from './mediastream.class';\r\nimport {\r\n  MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n  MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS\r\n} from './mediastream.token';\r\nimport { MediastreamModule } from './mediastream.module';\r\n\r\n\r\n@Injectable({\r\n  providedIn: MediastreamModule\r\n})\r\nexport class MediastreamService extends AMediastream {\r\n\r\n  constructor(private readonly _injector: Injector) {\r\n    super();\r\n  }\r\n\r\n  async getCameraDevices(): Promise<MediaDeviceInfo[]> {\r\n    return (await this.getDevices()).filter((device: MediaDeviceInfo) => device.kind === 'videoinput');\r\n  }\r\n\r\n  async getDevices(): Promise<MediaDeviceInfo[]> {\r\n    return await this.MEDIA_DEVICES.enumerateDevices();\r\n  }\r\n\r\n  async getMicrophoneDevices(): Promise<MediaDeviceInfo[]> {\r\n    return (await this.getDevices()).filter((device: MediaDeviceInfo) => device.kind === 'audioinput');\r\n  }\r\n\r\n  async hasCameraDevices(): Promise<boolean> {\r\n    return (await this.getCameraDevices()).length !== 0;\r\n  }\r\n\r\n  async hasMicrophoneDevices(): Promise<boolean> {\r\n    return (await this.getMicrophoneDevices()).length !== 0;\r\n  }\r\n\r\n  async requestCamera(\r\n    constraints?: MediaTrackConstraints\r\n  ): Promise<MediastreamCameraService> {\r\n    const cameraConstraints: boolean | MediaTrackConstraints = constraints || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamCameraService,\r\n          useClass: MediastreamCameraService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n          useValue: cameraConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: false,\r\n      video: cameraConstraints\r\n    }).then(() => injector.get(MediastreamCameraService));\r\n  }\r\n\r\n  async requestCameraAndMicrophone(constraints?: Partial<\r\n    Record<'audio' | 'video', MediaTrackConstraints>\r\n  >): Promise<MediastreamCameraMicrophoneService> {\r\n    const cameraConstraints: boolean | MediaTrackConstraints\r\n      = constraints?.video || true;\r\n    const microphoneConstraints: boolean | MediaTrackConstraints\r\n      = constraints?.audio || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamCameraService,\r\n          useClass: MediastreamCameraService\r\n        }, {\r\n          provide: MediastreamCameraMicrophoneService,\r\n          useClass: MediastreamCameraMicrophoneService\r\n        }, {\r\n          provide: MediastreamMicrophoneService,\r\n          useClass: MediastreamMicrophoneService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n          useValue: cameraConstraints\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n          useValue: microphoneConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: microphoneConstraints,\r\n      video: cameraConstraints\r\n    }).then(() => injector.get(MediastreamCameraMicrophoneService));\r\n  }\r\n\r\n  async requestMicrophone(\r\n    constraints?: MediaTrackConstraints\r\n  ): Promise<MediastreamMicrophoneService> {\r\n    const microphoneConstraints: boolean | MediaTrackConstraints = constraints || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamMicrophoneService,\r\n          useClass: MediastreamMicrophoneService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n          useValue: microphoneConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: microphoneConstraints,\r\n      video: false\r\n    }).then(() => injector.get(MediastreamMicrophoneService));\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of mediastream\r\n */\r\n\r\nexport * from './lib/mediastream-camera-microphone.service';\r\nexport * from './lib/mediastream-camera.service';\r\nexport * from './lib/mediastream-microphone.service';\r\nexport * from './lib/mediastream.service';\r\nexport * from './lib/mediastream.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.MediastreamCameraService","i2.MediastreamMicrophoneService"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, NgModule, Injector } from '@angular/core';\nimport { BehaviorSubject, combineLatest, from } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n\nclass AMediastream {\r\n    constructor() {\r\n        this.NAVIGATOR = window.navigator;\r\n        this.MEDIA_DEVICES = this.NAVIGATOR.mediaDevices;\r\n    }\r\n}\n\nclass AMediastreamDevice extends AMediastream {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._currentMediaDeviceSubject$ = new BehaviorSubject(null);\r\n        this.currentMediaDevice$ = this._currentMediaDeviceSubject$;\r\n    }\r\n}\n\nclass AMediastreamService extends AMediastreamDevice {\r\n    constructor(_mediaConstraints) {\r\n        super();\r\n        this._mediaConstraints = _mediaConstraints;\r\n        this._toggleMediaStreamSubject = new BehaviorSubject(true);\r\n    }\r\n    get mediastreamConstraints() {\r\n        return this._mediaConstraints;\r\n    }\r\n    _buildMediaConstraints(device) {\r\n        switch (true) {\r\n            case device && typeof this._mediaConstraints === 'object':\r\n                return Object.assign(Object.assign({}, this._mediaConstraints), { deviceId: device.deviceId });\r\n            case device\r\n                && typeof this._mediaConstraints === 'boolean'\r\n                && this._mediaConstraints:\r\n                return {\r\n                    deviceId: device.deviceId\r\n                };\r\n            case device\r\n                && typeof this._mediaConstraints === 'boolean'\r\n                && !this._mediaConstraints:\r\n                return this._mediaConstraints;\r\n            default:\r\n                return Object.assign({}, this._mediaConstraints);\r\n        }\r\n    }\r\n}\n\nclass AMediastreamCameraService extends AMediastreamService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._userMedia$ = combineLatest([\r\n            this._currentMediaDeviceSubject$\r\n        ]).pipe(switchMap(([device]) => from(this.MEDIA_DEVICES.getUserMedia({\r\n            audio: false,\r\n            video: this._buildMediaConstraints(device)\r\n        }))));\r\n    }\r\n    disableCamera() {\r\n        this._toggleMediaStreamSubject.next(false);\r\n    }\r\n    enableCamera() {\r\n        this._toggleMediaStreamSubject.next(true);\r\n    }\r\n    toggleCamera() {\r\n        const value = this._toggleMediaStreamSubject.getValue();\r\n        this._toggleMediaStreamSubject.next(!value);\r\n    }\r\n    updateCameraDevice(device) {\r\n        this._currentMediaDeviceSubject$.next(device);\r\n    }\r\n}\n\nconst MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS = new InjectionToken('MEDIASTREAM_CAMERA_CONSTRAINTS');\r\nconst MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS = new InjectionToken('MEDIASTREAM_MICROPHONE_CONSTRAINTS');\n\nclass MediastreamCameraService extends AMediastreamCameraService {\r\n    constructor(__mediastreamCameraConstraints) {\r\n        super(__mediastreamCameraConstraints);\r\n        this.__mediastreamCameraConstraints = __mediastreamCameraConstraints;\r\n        this.mediastream$ = combineLatest([\r\n            this._toggleMediaStreamSubject.asObservable(),\r\n            this._userMedia$\r\n        ]).pipe(map(([toggleCamera, media]) => {\r\n            media.getAudioTracks()\r\n                .map((track) => {\r\n                track.enabled = toggleCamera;\r\n                return track;\r\n            });\r\n            return media;\r\n        }));\r\n    }\r\n}\r\nMediastreamCameraService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService, deps: [{ token: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamCameraService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS]\r\n                    }] }];\r\n    } });\n\nclass AMediastreamMicrophoneService extends AMediastreamService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._userMedia$ = combineLatest([\r\n            this._currentMediaDeviceSubject$\r\n        ]).pipe(switchMap(([device]) => from(this.MEDIA_DEVICES.getUserMedia({\r\n            audio: this._buildMediaConstraints(device),\r\n            video: false\r\n        }))));\r\n    }\r\n    disableMicrophone() {\r\n        this._toggleMediaStreamSubject.next(false);\r\n    }\r\n    enableMicrophone() {\r\n        this._toggleMediaStreamSubject.next(true);\r\n    }\r\n    toggleMicrophone() {\r\n        const value = this._toggleMediaStreamSubject.getValue();\r\n        this._toggleMediaStreamSubject.next(!value);\r\n    }\r\n    updateMicrophoneDevice(device) {\r\n        this._currentMediaDeviceSubject$.next(device);\r\n    }\r\n}\n\nclass MediastreamMicrophoneService extends AMediastreamMicrophoneService {\r\n    constructor(__mediastreamMicrophoneConstraints) {\r\n        super(__mediastreamMicrophoneConstraints);\r\n        this.__mediastreamMicrophoneConstraints = __mediastreamMicrophoneConstraints;\r\n        this.mediastream$ = combineLatest([\r\n            this._toggleMediaStreamSubject.asObservable(),\r\n            this._userMedia$\r\n        ]).pipe(map(([toggleMicrophone, media]) => {\r\n            media.getAudioTracks()\r\n                .map((track) => {\r\n                track.enabled = toggleMicrophone;\r\n                return track;\r\n            });\r\n            return media;\r\n        }));\r\n    }\r\n}\r\nMediastreamMicrophoneService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService, deps: [{ token: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamMicrophoneService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamMicrophoneService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS]\r\n                    }] }];\r\n    } });\n\nclass MediastreamCameraMicrophoneService {\r\n    constructor(_mediastreamCameraService, _mediastreamMicrophoneService) {\r\n        this._mediastreamCameraService = _mediastreamCameraService;\r\n        this._mediastreamMicrophoneService = _mediastreamMicrophoneService;\r\n        this.currentCameraMediaDevice$ = this._mediastreamCameraService.currentMediaDevice$;\r\n        this.currentMicrophoneMediaDevice$ = this._mediastreamMicrophoneService.currentMediaDevice$;\r\n        this.mediastream$ = combineLatest([\r\n            this._mediastreamCameraService.mediastream$,\r\n            this._mediastreamMicrophoneService.mediastream$\r\n        ]).pipe(map(([mediastreamCamera, mediastreamMicrophone]) => {\r\n            const mediastreamCameraTracks = mediastreamCamera.getVideoTracks();\r\n            const mediastreamMicrophoneTracks = mediastreamMicrophone.getAudioTracks();\r\n            const mediastreamTracks = [\r\n                ...mediastreamCameraTracks,\r\n                ...mediastreamMicrophoneTracks\r\n            ];\r\n            return new MediaStream(mediastreamTracks);\r\n        }));\r\n    }\r\n    get mediastreamCameraConstraints() {\r\n        return this._mediastreamCameraService.mediastreamConstraints;\r\n    }\r\n    get mediastreamMicrophoneConstraints() {\r\n        return this._mediastreamMicrophoneService.mediastreamConstraints;\r\n    }\r\n    disableCamera() {\r\n        this._mediastreamCameraService.disableCamera();\r\n    }\r\n    disableMicrophone() {\r\n        this._mediastreamMicrophoneService.disableMicrophone();\r\n    }\r\n    enableCamera() {\r\n        this._mediastreamCameraService.enableCamera();\r\n    }\r\n    enableMicrophone() {\r\n        this._mediastreamMicrophoneService.enableMicrophone();\r\n    }\r\n    toggleCamera() {\r\n        this._mediastreamCameraService.toggleCamera();\r\n    }\r\n    toggleMicrophone() {\r\n        this._mediastreamMicrophoneService.toggleMicrophone();\r\n    }\r\n    updateCameraDevice(device) {\r\n        this._mediastreamCameraService.updateCameraDevice(device);\r\n    }\r\n    updateMicrophoneDevice(device) {\r\n        this._mediastreamMicrophoneService.updateMicrophoneDevice(device);\r\n    }\r\n}\r\nMediastreamCameraMicrophoneService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService, deps: [{ token: MediastreamCameraService }, { token: MediastreamMicrophoneService }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamCameraMicrophoneService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamCameraMicrophoneService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: MediastreamCameraService }, { type: MediastreamMicrophoneService }]; } });\n\nclass MediastreamModule {\r\n}\r\nMediastreamModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMediastreamModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule });\r\nMediastreamModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{}]\r\n        }] });\n\nclass MediastreamService extends AMediastream {\r\n    constructor(_injector) {\r\n        super();\r\n        this._injector = _injector;\r\n    }\r\n    getCameraDevices() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return (yield this.getDevices()).filter((device) => device.kind === 'videoinput');\r\n        });\r\n    }\r\n    getDevices() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield this.MEDIA_DEVICES.enumerateDevices();\r\n        });\r\n    }\r\n    getMicrophoneDevices() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return (yield this.getDevices()).filter((device) => device.kind === 'audioinput');\r\n        });\r\n    }\r\n    hasCameraDevices() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return (yield this.getCameraDevices()).length !== 0;\r\n        });\r\n    }\r\n    hasMicrophoneDevices() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return (yield this.getMicrophoneDevices()).length !== 0;\r\n        });\r\n    }\r\n    requestCamera(constraints) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const cameraConstraints = constraints || true;\r\n            const injector = Injector.create({\r\n                providers: [\r\n                    {\r\n                        provide: MediastreamCameraService,\r\n                        useClass: MediastreamCameraService\r\n                    }, {\r\n                        provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n                        useValue: cameraConstraints\r\n                    }\r\n                ],\r\n                parent: this._injector\r\n            });\r\n            return yield this.MEDIA_DEVICES.getUserMedia({\r\n                audio: false,\r\n                video: cameraConstraints\r\n            }).then(() => injector.get(MediastreamCameraService));\r\n        });\r\n    }\r\n    requestCameraAndMicrophone(constraints) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const cameraConstraints = (constraints === null || constraints === void 0 ? void 0 : constraints.video) || true;\r\n            const microphoneConstraints = (constraints === null || constraints === void 0 ? void 0 : constraints.audio) || true;\r\n            const injector = Injector.create({\r\n                providers: [\r\n                    {\r\n                        provide: MediastreamCameraService,\r\n                        useClass: MediastreamCameraService\r\n                    }, {\r\n                        provide: MediastreamCameraMicrophoneService,\r\n                        useClass: MediastreamCameraMicrophoneService\r\n                    }, {\r\n                        provide: MediastreamMicrophoneService,\r\n                        useClass: MediastreamMicrophoneService\r\n                    }, {\r\n                        provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n                        useValue: cameraConstraints\r\n                    }, {\r\n                        provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n                        useValue: microphoneConstraints\r\n                    }\r\n                ],\r\n                parent: this._injector\r\n            });\r\n            return yield this.MEDIA_DEVICES.getUserMedia({\r\n                audio: microphoneConstraints,\r\n                video: cameraConstraints\r\n            }).then(() => injector.get(MediastreamCameraMicrophoneService));\r\n        });\r\n    }\r\n    requestMicrophone(constraints) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const microphoneConstraints = constraints || true;\r\n            const injector = Injector.create({\r\n                providers: [\r\n                    {\r\n                        provide: MediastreamMicrophoneService,\r\n                        useClass: MediastreamMicrophoneService\r\n                    }, {\r\n                        provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n                        useValue: microphoneConstraints\r\n                    }\r\n                ],\r\n                parent: this._injector\r\n            });\r\n            return yield this.MEDIA_DEVICES.getUserMedia({\r\n                audio: microphoneConstraints,\r\n                video: false\r\n            }).then(() => injector.get(MediastreamMicrophoneService));\r\n        });\r\n    }\r\n}\r\nMediastreamService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMediastreamService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, providedIn: MediastreamModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: MediastreamService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: MediastreamModule\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\n/*\r\n * Public API Surface of mediastream\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MediastreamCameraMicrophoneService, MediastreamCameraService, MediastreamMicrophoneService, MediastreamModule, MediastreamService };\n//# sourceMappingURL=ashetm-ng-mediastream.mjs.map\n","map":{"version":3,"file":"ashetm-ng-mediastream.mjs","sources":["../../../projects/mediastream/src/lib/mediastream.class.ts","../../../projects/mediastream/src/lib/mediastream-device.class.ts","../../../projects/mediastream/src/lib/mediastream-service.class.ts","../../../projects/mediastream/src/lib/mediastream-camera-service.class.ts","../../../projects/mediastream/src/lib/mediastream.token.ts","../../../projects/mediastream/src/lib/mediastream-camera.service.ts","../../../projects/mediastream/src/lib/mediastream-microphone-service.class.ts","../../../projects/mediastream/src/lib/mediastream-microphone.service.ts","../../../projects/mediastream/src/lib/mediastream-camera-microphone.service.ts","../../../projects/mediastream/src/lib/mediastream.module.ts","../../../projects/mediastream/src/lib/mediastream.service.ts","../../../projects/mediastream/src/public-api.ts","../../../projects/mediastream/src/ashetm-ng-mediastream.ts"],"sourcesContent":["\r\nexport abstract class AMediastream {\r\n\r\n  protected readonly NAVIGATOR: Navigator = window.navigator;\r\n  protected readonly MEDIA_DEVICES: MediaDevices = this.NAVIGATOR.mediaDevices;\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nimport { AMediastream } from \"./mediastream.class\";\r\n\r\n\r\nexport abstract class AMediastreamDevice extends AMediastream {\r\n\r\n  protected readonly _currentMediaDeviceSubject$: BehaviorSubject<MediaDeviceInfo>\r\n    = new BehaviorSubject<MediaDeviceInfo>(null as any as MediaDeviceInfo);\r\n  readonly currentMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._currentMediaDeviceSubject$;\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nimport { AMediastreamDevice } from \"./mediastream-device.class\";\r\n\r\n\r\nexport abstract class AMediastreamService extends AMediastreamDevice {\r\n\r\n  abstract readonly mediastream$: Observable<MediaStream>;\r\n\r\n  protected readonly _toggleMediaStreamSubject: BehaviorSubject<boolean>\r\n    = new BehaviorSubject<boolean>(true);\r\n\r\n  get mediastreamConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediaConstraints;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly _mediaConstraints: boolean | MediaTrackConstraints\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  protected _buildMediaConstraints(\r\n    device: MediaDeviceInfo | null\r\n  ): boolean | MediaTrackConstraints {\r\n    switch (true) {\r\n      case device && typeof this._mediaConstraints === 'object':\r\n        return {\r\n          ...this._mediaConstraints as MediaTrackConstraints,\r\n          deviceId: (device as MediaDeviceInfo).deviceId\r\n        };\r\n      case device\r\n        && typeof this._mediaConstraints === 'boolean'\r\n          && this._mediaConstraints:\r\n        return {\r\n          deviceId: (device as MediaDeviceInfo).deviceId\r\n        };\r\n      case device\r\n        && typeof this._mediaConstraints === 'boolean'\r\n          && !this._mediaConstraints:\r\n        return this._mediaConstraints as false;\r\n\r\n      default:\r\n        return {\r\n          ...this._mediaConstraints as MediaTrackConstraints\r\n        };\r\n    }\r\n  }\r\n\r\n}\r\n","import { combineLatest, from, Observable } from \"rxjs\";\r\nimport { switchMap } from \"rxjs/operators\";\r\n\r\nimport { IMediastreamCameraService } from \"./mediastream-camera-service.interface\";\r\nimport { AMediastreamService } from \"./mediastream-service.class\";\r\n\r\n\r\nexport abstract class AMediastreamCameraService\r\n  extends AMediastreamService\r\n  implements IMediastreamCameraService {\r\n\r\n  protected readonly _userMedia$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._currentMediaDeviceSubject$\r\n    ]).pipe(switchMap(([device]: [MediaDeviceInfo]) =>\r\n      from(this.MEDIA_DEVICES.getUserMedia({\r\n        audio: false,\r\n        video: this._buildMediaConstraints(device)\r\n      }))));\r\n\r\n  disableCamera(): void {\r\n    this._toggleMediaStreamSubject.next(false);\r\n  }\r\n\r\n  enableCamera(): void {\r\n    this._toggleMediaStreamSubject.next(true);\r\n  }\r\n\r\n  toggleCamera(): void {\r\n    const value: boolean = this._toggleMediaStreamSubject.getValue();\r\n\r\n    this._toggleMediaStreamSubject.next(!value);\r\n  }\r\n\r\n  updateCameraDevice(\r\n    device: MediaDeviceInfo & Record<'kind', 'videoinput'>\r\n  ): void {\r\n    this._currentMediaDeviceSubject$.next(device);\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport const MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS: InjectionToken<boolean | MediaStreamConstraints>\r\n  = new InjectionToken<boolean | MediaStreamConstraints>('MEDIASTREAM_CAMERA_CONSTRAINTS');\r\nexport const MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS: InjectionToken<boolean | MediaStreamConstraints>\r\n  = new InjectionToken<boolean | MediaStreamConstraints>('MEDIASTREAM_MICROPHONE_CONSTRAINTS');\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AMediastreamCameraService } from './mediastream-camera-service.class';\r\nimport { MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS } from './mediastream.token';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamCameraService extends AMediastreamCameraService {\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._toggleMediaStreamSubject.asObservable(),\r\n      this._userMedia$\r\n    ]).pipe(map(([toggleCamera, media]: [boolean, MediaStream]) => {\r\n      media.getAudioTracks()\r\n        .map((track: MediaStreamTrack) => {\r\n          track.enabled = toggleCamera;\r\n\r\n          return track;\r\n        });\r\n\r\n      return media;\r\n    }));\r\n\r\n  constructor(\r\n    @Inject(MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS)\r\n      private readonly __mediastreamCameraConstraints: any\r\n  ) {\r\n    super(__mediastreamCameraConstraints);\r\n  }\r\n\r\n}\r\n","import { combineLatest, from, Observable } from \"rxjs\";\r\nimport { switchMap } from \"rxjs/operators\";\r\n\r\nimport { IMediastreamMicrophoneService } from \"./mediastream-microphone-service.interface\";\r\nimport { AMediastreamService } from \"./mediastream-service.class\";\r\n\r\n\r\nexport abstract class AMediastreamMicrophoneService\r\n  extends AMediastreamService\r\n  implements IMediastreamMicrophoneService {\r\n\r\n  protected readonly _userMedia$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._currentMediaDeviceSubject$\r\n    ]).pipe(switchMap(([device]: [MediaDeviceInfo]) =>\r\n      from(this.MEDIA_DEVICES.getUserMedia({\r\n        audio: this._buildMediaConstraints(device),\r\n        video: false\r\n      }))));\r\n\r\n  disableMicrophone(): void {\r\n    this._toggleMediaStreamSubject.next(false);\r\n  }\r\n\r\n  enableMicrophone(): void {\r\n    this._toggleMediaStreamSubject.next(true);\r\n  }\r\n\r\n  toggleMicrophone(): void {\r\n    const value: boolean = this._toggleMediaStreamSubject.getValue();\r\n\r\n    this._toggleMediaStreamSubject.next(!value);\r\n  }\r\n\r\n  updateMicrophoneDevice(\r\n    device: MediaDeviceInfo & Record<'kind', 'audioinput'>\r\n  ): void {\r\n    this._currentMediaDeviceSubject$.next(device);\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AMediastreamMicrophoneService } from './mediastream-microphone-service.class';\r\nimport { MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS } from './mediastream.token';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamMicrophoneService extends AMediastreamMicrophoneService {\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._toggleMediaStreamSubject.asObservable(),\r\n      this._userMedia$\r\n    ]).pipe(map(([toggleMicrophone, media]: [boolean, MediaStream]) => {\r\n      media.getAudioTracks()\r\n        .map((track: MediaStreamTrack) => {\r\n          track.enabled = toggleMicrophone;\r\n\r\n          return track;\r\n        });\r\n\r\n      return media;\r\n    }));\r\n\r\n  constructor(\r\n    @Inject(MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS)\r\n      private readonly __mediastreamMicrophoneConstraints: any\r\n  ) {\r\n    super(__mediastreamMicrophoneConstraints);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { IMediastreamCameraService } from './mediastream-camera-service.interface';\r\nimport { MediastreamCameraService } from './mediastream-camera.service';\r\nimport { IMediastreamMicrophoneService } from './mediastream-microphone-service.interface';\r\nimport { MediastreamMicrophoneService } from './mediastream-microphone.service';\r\n\r\n\r\n@Injectable()\r\nexport class MediastreamCameraMicrophoneService\r\n  implements IMediastreamCameraService, IMediastreamMicrophoneService {\r\n\r\n  readonly currentCameraMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._mediastreamCameraService.currentMediaDevice$;\r\n\r\n  readonly currentMicrophoneMediaDevice$: Observable<MediaDeviceInfo>\r\n    = this._mediastreamMicrophoneService.currentMediaDevice$;\r\n\r\n  readonly mediastream$: Observable<MediaStream>\r\n    = combineLatest([\r\n      this._mediastreamCameraService.mediastream$,\r\n      this._mediastreamMicrophoneService.mediastream$\r\n    ]).pipe(map(([mediastreamCamera, mediastreamMicrophone]: [MediaStream, MediaStream]) => {\r\n      const mediastreamCameraTracks: MediaStreamTrack[] = mediastreamCamera.getVideoTracks();\r\n      const mediastreamMicrophoneTracks: MediaStreamTrack[] = mediastreamMicrophone.getAudioTracks();\r\n      const mediastreamTracks: MediaStreamTrack[] = [\r\n        ...mediastreamCameraTracks,\r\n        ...mediastreamMicrophoneTracks\r\n      ];\r\n\r\n      return new MediaStream(mediastreamTracks);\r\n    }));\r\n\r\n  get mediastreamCameraConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediastreamCameraService.mediastreamConstraints;\r\n  }\r\n\r\n  get mediastreamMicrophoneConstraints(): boolean | MediaTrackConstraints {\r\n    return this._mediastreamMicrophoneService.mediastreamConstraints;\r\n  }\r\n\r\n  constructor(\r\n    private readonly _mediastreamCameraService: MediastreamCameraService,\r\n    private readonly _mediastreamMicrophoneService: MediastreamMicrophoneService\r\n  ) { }\r\n\r\n  disableCamera(): void {\r\n    this._mediastreamCameraService.disableCamera();\r\n  }\r\n\r\n  disableMicrophone(): void {\r\n    this._mediastreamMicrophoneService.disableMicrophone();\r\n  }\r\n\r\n  enableCamera(): void {\r\n    this._mediastreamCameraService.enableCamera();\r\n  }\r\n\r\n  enableMicrophone(): void {\r\n    this._mediastreamMicrophoneService.enableMicrophone();\r\n  }\r\n\r\n  toggleCamera(): void {\r\n    this._mediastreamCameraService.toggleCamera();\r\n  }\r\n\r\n  toggleMicrophone(): void {\r\n    this._mediastreamMicrophoneService.toggleMicrophone();\r\n  }\r\n\r\n  updateCameraDevice(device: MediaDeviceInfo & Record<'kind', 'videoinput'>): void {\r\n    this._mediastreamCameraService.updateCameraDevice(device);\r\n  }\r\n\r\n  updateMicrophoneDevice(device: MediaDeviceInfo & Record<'kind', 'audioinput'>): void {\r\n    this._mediastreamMicrophoneService.updateMicrophoneDevice(device);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\n\r\n@NgModule({ })\r\nexport class MediastreamModule { }\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { MediastreamCameraMicrophoneService } from './mediastream-camera-microphone.service';\r\nimport { MediastreamCameraService } from './mediastream-camera.service';\r\nimport { MediastreamMicrophoneService } from './mediastream-microphone.service';\r\nimport { AMediastream } from './mediastream.class';\r\nimport {\r\n  MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n  MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS\r\n} from './mediastream.token';\r\nimport { MediastreamModule } from './mediastream.module';\r\n\r\n\r\n@Injectable({\r\n  providedIn: MediastreamModule\r\n})\r\nexport class MediastreamService extends AMediastream {\r\n\r\n  constructor(private readonly _injector: Injector) {\r\n    super();\r\n  }\r\n\r\n  async getCameraDevices(): Promise<MediaDeviceInfo[]> {\r\n    return (await this.getDevices()).filter((device: MediaDeviceInfo) => device.kind === 'videoinput');\r\n  }\r\n\r\n  async getDevices(): Promise<MediaDeviceInfo[]> {\r\n    return await this.MEDIA_DEVICES.enumerateDevices();\r\n  }\r\n\r\n  async getMicrophoneDevices(): Promise<MediaDeviceInfo[]> {\r\n    return (await this.getDevices()).filter((device: MediaDeviceInfo) => device.kind === 'audioinput');\r\n  }\r\n\r\n  async hasCameraDevices(): Promise<boolean> {\r\n    return (await this.getCameraDevices()).length !== 0;\r\n  }\r\n\r\n  async hasMicrophoneDevices(): Promise<boolean> {\r\n    return (await this.getMicrophoneDevices()).length !== 0;\r\n  }\r\n\r\n  async requestCamera(\r\n    constraints?: MediaTrackConstraints\r\n  ): Promise<MediastreamCameraService> {\r\n    const cameraConstraints: boolean | MediaTrackConstraints = constraints || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamCameraService,\r\n          useClass: MediastreamCameraService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n          useValue: cameraConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: false,\r\n      video: cameraConstraints\r\n    }).then(() => injector.get(MediastreamCameraService));\r\n  }\r\n\r\n  async requestCameraAndMicrophone(constraints?: Partial<\r\n    Record<'audio' | 'video', MediaTrackConstraints>\r\n  >): Promise<MediastreamCameraMicrophoneService> {\r\n    const cameraConstraints: boolean | MediaTrackConstraints\r\n      = constraints?.video || true;\r\n    const microphoneConstraints: boolean | MediaTrackConstraints\r\n      = constraints?.audio || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamCameraService,\r\n          useClass: MediastreamCameraService\r\n        }, {\r\n          provide: MediastreamCameraMicrophoneService,\r\n          useClass: MediastreamCameraMicrophoneService\r\n        }, {\r\n          provide: MediastreamMicrophoneService,\r\n          useClass: MediastreamMicrophoneService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_CAMERA_CONSTRAINTS,\r\n          useValue: cameraConstraints\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n          useValue: microphoneConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: microphoneConstraints,\r\n      video: cameraConstraints\r\n    }).then(() => injector.get(MediastreamCameraMicrophoneService));\r\n  }\r\n\r\n  async requestMicrophone(\r\n    constraints?: MediaTrackConstraints\r\n  ): Promise<MediastreamMicrophoneService> {\r\n    const microphoneConstraints: boolean | MediaTrackConstraints = constraints || true;\r\n    const injector: Injector = Injector.create({\r\n      providers: [\r\n        {\r\n          provide: MediastreamMicrophoneService,\r\n          useClass: MediastreamMicrophoneService\r\n        }, {\r\n          provide: MEDIASTREAM_TOKEN_MICROPHONE_CONSTRAINTS,\r\n          useValue: microphoneConstraints\r\n        }\r\n      ],\r\n      parent: this._injector\r\n    });\r\n\r\n    return await this.MEDIA_DEVICES.getUserMedia({\r\n      audio: microphoneConstraints,\r\n      video: false\r\n    }).then(() => injector.get(MediastreamMicrophoneService));\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of mediastream\r\n */\r\n\r\nexport * from './lib/mediastream-camera-microphone.service';\r\nexport * from './lib/mediastream-camera.service';\r\nexport * from './lib/mediastream-microphone.service';\r\nexport * from './lib/mediastream.service';\r\nexport * from './lib/mediastream.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.MediastreamCameraService","i2.MediastreamMicrophoneService"],"mappings":"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"}}}